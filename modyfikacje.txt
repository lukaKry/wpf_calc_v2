dodac git ignore do repozytorium 


nowa klasa inpterpreter - serwis? 

- ma za zadanie spojrzeć na ciag symboli w klasie Equation i poprawnie zinterpretowac dzialanie

- jedna metoda void Inperpret()
	
przypadki ( rowniez do testowania )
2+2 ( oczywiscie tez inne dzialania typu odejmowanie, mnozenie, dzielenie )

2+2*2 ( kolejnosc dzialania )

2*(2+2) ( ponownie kolejnosc dzialania; tym razem z wykorzystaniem 



==========================================
druga opcja, to tworzenie equation jako nowych obiektow z wlasciwosciami

class Equation
{
//property
	numbers	( na poczatek niech to beda dwie liczby )
	calculation type : dodawane, odejmownaie, mnozenie ( przechowywane jako obiekty typu ICalculation)
	priority ( dodawanie i odejmowanie mają np. level, mnozenie i dzielenie level 1, nawiasy level 2
	( wczesniej mialem w tej klasie tez result ) 

//metoda
void Calculate() ma uruchamia metode z calculation type 
}


==========================================

sprawdzić workflow apki

nacisniecie np. 9
\/
MyApplication.NumberButtonIsClicked()
\/
MainDisplay.AddToDisplay()

.... wait for additional input

nacisniecie np. +
\/
MyApplication.SymbolButtonIsClicked()
\/
Calculator.AddSymbolToTheMemory()
Calculator.AddNumberToTheMemory()
MainDisplay.Clear()

.... wait for additional input
nacisniecie np. 8
\/
MyApplication.NumberButtonIsClicked()
\/
MainDisplay.AddToDisplay()

.... wait for additional input

nacisniecie =
Calculator.AddNumberToTheMemory()
\/
try { Calculator.Calculate(); }



Opcja nr 1 - podmieniam metode calculate na:

inna metode, ktora:

poszukuje typu kalkulacji, ktory ma najwiekszy priorytet

jak juz znajdzie na liscie np. mnozenie, to bieze dwa okoliczne numerki i wykonuje dzialanie zgodnie z nazwa



Memory content:
[ 2,2 ]
[ "+" ]

Calculator.Calculate(IEquation currentEquation)
{
	// na poczatek rozkmina dla najprostszej opcji czyli 2+2
	// musi byc cos co rozpozna, ze jesli jest znak plus, to stworzy nowy obiekt ICalculation
	// czyli na poczatek trzeba stworzyc serwis, do ktorego bedzie sie wysylac pojedynczy symbol
		np. pierwszy na liscie symboli Equation
	// ten serwis bedzie zwracal obiekt typu ICalculation
	// dla takiego obiektu ICalculation mozna uzyc wowczas metody Calculate, ktora zwroci rezultat
		zeby nastepnie zapisac go do pamieci kalkulatora


	// zeby stworzyc tego interpretera, to trzeba najpierw stworzyc odpowiednie klasy calculation dla dodawania, odejmowania itp. 

	
}

testy tej metody:
2+2
2*2
2+2*2
2*(2+2)



// do zrobienia jutro 
stworzenie powyzszej metody
stworzenie testow 
podmiana z obcnej metody calculate na nowo stworzoną 

